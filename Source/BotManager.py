from apscheduler.schedulers.background import BackgroundScheduler
from dublib.Methods import ReadJSON, RemoveHTML, WriteJSON
from Source.Functions import EscapeCharacters
from Source.Horoscope import Horoscope
from telebot import types
from time import sleep

import telebot
import random
import enum
import os

# –¢–∏–ø—ã –æ–∂–∏–¥–∞–µ–º—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
class ExpectedMessageTypes(enum.Enum):
	
	#---> –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤–æ–π—Å—Ç–≤–∞.
	#==========================================================================================#
	# –ù–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
	Undefined = "undefined"
	# –í—ã–±–æ—Ä–∫–∞.
	Sampling = "sampling"
	# –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
	Message = "message"
	# –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.
	Image = "image"

# –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞.
class BotManager:
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
	def __SaveSettings(self):
		# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
		WriteJSON("Settings.json", self.__Settings)
		
	# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —á–∞—Ç–∞—Ö.
	def __CheckSubscriptions(self, UserID: str) -> bool:
		# –°–æ—Å—Ç–æ—è–Ω–∏–µ: —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ —á–µ–ª–æ–≤–µ–∫ –≤ –≥—Ä—É–ø–ø–µ.
		IsSubscripted = False
		# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫.
		Subscriptions = 0
		
		# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.
		if UserID in self.__Users["users"].keys():
			
			# –î–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞.
			for ChatID in self.__Settings["required-subscriptions"].keys():
				
				try:
					# –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ–± —É—á–∞—Å—Ç–Ω–∏–∫–µ —á–∞—Ç–∞.
					Response = self.__Bot.get_chat_member(ChatID, int(UserID))
					# –ï—Å–ª–∏ —É—á–∞—Å—Ç–Ω–∏–∫, –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å–æ–∫.
					if Response.status in ["admin", "creator", "member"]: Subscriptions += 1
					
				except:
					pass
		
		# –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å–æ–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±—É–µ–º–æ–º—É.
		if Subscriptions == len(self.__Settings["required-subscriptions"].keys()):
			# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞.
			IsSubscripted = True
			# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.			
			self.__Users["users"][UserID]["subscripted"] = True
			# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
			WriteJSON("Data/Users.json", self.__Users)
		
		return IsSubscripted
	
	# –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä.
	def __init__(self, Settings: dict, Bot: telebot.TeleBot):
		
		#---> –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å–≤–æ–π—Å—Ç–≤.
		#==========================================================================================#
		# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á.
		self.__Planner = BackgroundScheduler()
		# –¢–µ–∫—É—â–∏–π —Ç–∏–ø –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
		self.__ExpectedType = ExpectedMessageTypes.Undefined
		# –°–ª–æ–≤–∞—Ä—å –≥–æ—Ä–æ—Å–∫–æ–ø–∞.
		self.__Horoscope = Horoscope(Settings)
		# –°–ª–æ–≤–∞—Ä—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.
		self.__Users = ReadJSON("Data/Users.json")
		# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
		self.__Settings = Settings.copy()
		# –≠–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
		self.__Bot = Bot
		# –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é.
		self.__Planner.add_job(self.__Horoscope.update, "cron", minute = "0", hour = "0")
		# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
		self.__Planner.start()
		
	# –ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å–±–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
	def collect(self, Status: bool):
		# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–±–æ—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.
		self.__Settings["collect-media"] = Status
		# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
		self.__SaveSettings()
		
	# –ò–∑–º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.
	def editMessage(self, Text: str) -> bool:
		# –°–æ—Å—Ç–æ—è–Ω–∏–µ: –∫–æ—Ä—Ä–µ–∫—Ç–∏–Ω –ª–∏ —Ç–µ–∫—Å—Ç.
		IsCorrected = True
		# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
		MaxLength = 1024 if self.__Settings["premium"] == False else 2048
		if len(os.listdir("Data")) == 0: MaxLength = 4096 
		
		# –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ.
		if len(RemoveHTML(Text)) >= MaxLength:
			# –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞.
			self.disable()
			# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è.
			IsCorrected = False
			
		else:
			# –ó–∞–ø–∏—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è.
			self.__Settings["message"] = Text
			# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
			self.__SaveSettings()
			
		return IsCorrected
	
	# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–ª–æ–∂–µ–Ω–∏–π.
	def getAttachmentsCount(self) -> int:
		# –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ñ–∞–π–ª–æ–≤.
		Count = len(os.listdir("Attachments"))
		
		return Count
		
	# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–æ—Ç–∞.
	def getData(self) -> dict:
		return self.__Settings.copy()
		
	# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –≥–æ—Ä–æ—Å–∫–æ–ø–∞.
	def getHoroscope(self, UserID: int, Zodiac: str) -> str | None:
		# –†–∞–∑–±–∏—Ç–∏–µ –ø–æ –ø—Ä–æ–±–µ–ª–∞–º.
		Zodiac = Zodiac.split(" ")
		# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤.
		Data = self.__Horoscope.getHoroscopes()
		# –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
		Text = None
		
		# –ï—Å–ª–∏ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.
		if len(Zodiac) > 1 and Zodiac[1].lower() in list(map(lambda x: x.lower(), list(Data.keys()))):
			
			# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç –≤–æ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∞—Ç–∞—Ö –∏–ª–∏ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
			if self.__Users["users"][str(UserID)]["subscripted"] == True or self.__Users["users"][str(UserID)]["admin"] == True:
				# –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞.
				Zodiac = Zodiac[1]
				# –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞.
				Date = EscapeCharacters(self.__Horoscope.getDate().split(" ")[0])
				# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞.
				Text = f"*–ì–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ {Date}*\n\n" + Data[Zodiac]["symbol"] + " *" + Zodiac.upper() + "*\n\n"
				# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä—É–±—Ä–∏–∫ –≥–æ—Ä–æ—Å–∫–æ–ø–∞.
				if Data[Zodiac]["love"] != None: Text += Data[Zodiac]["love"] + "\n\n"
				if Data[Zodiac]["career"] != None: Text += Data[Zodiac]["career"] + "\n\n"
				if Data[Zodiac]["health"] != None: Text += Data[Zodiac]["health"] + "\n\n"
				# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—â–∞–Ω–∏—è.
				Text += "–£–¥–∞—á–Ω–æ–≥–æ –≤–∞–º –¥–Ω—è\!"
				
			else:
				# –°–ø–∏—Å–æ–∫ –∫–Ω–æ–ø–æ–∫.
				Buttons = types.InlineKeyboardMarkup(row_width = 1)
				
				# –î–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞.
				for ChatID in self.__Settings["required-subscriptions"].keys():
					
					try:
						# –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏.
						Button = types.InlineKeyboardButton(self.__Settings["required-subscriptions"][ChatID]["title"], url = self.__Settings["required-subscriptions"][ChatID]["link"])
						# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏.
						Buttons.add(Button)
						
					except Exception as ExceptionData:
						# –í—ã–≤–æ–¥ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.
						print(ExceptionData)
					
				# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞.
				self.__Bot.send_message(
					chat_id = UserID,
					text = self.__Settings["subscription-notification"],
					parse_mode = "HTML",
					reply_markup = Buttons
				)

		return Text

	# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–∏–ø –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
	def getExpectedType(self) -> ExpectedMessageTypes:
		return self.__ExpectedType
	
	# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.
	def getStatistics(self) -> str:
		# –¢–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
		Text = "*üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
		# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
		ActiveUsersCount = 0
		# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø–æ–¥–ø–∏—Å–∫–æ–π Premium.
		PremiumUsersCount = 0
		
		# –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
		for UserID in self.__Users["users"].keys():
			# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω, –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç.
			if self.__Users["users"][UserID]["active"] == True: ActiveUsersCount += 1
			# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –ø–æ–¥–ø–∏—Å–∫—É, –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç.
			if self.__Users["users"][UserID]["premium"] == True: PremiumUsersCount += 1
			
		# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö.
		Text += "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: _" + EscapeCharacters(str(ActiveUsersCount)) + "_\n"
		Text += "–ò–º–µ—é—Ç Premium: _" + EscapeCharacters(str(PremiumUsersCount) + " (" + str(int(float(PremiumUsersCount / ActiveUsersCount) * 100.0)) + "%)") + "_\n"

		return Text
	
	# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞.
	def getStatus(self) -> bool:
		return self.__Settings["active"]
	
	# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –µ–≥–æ –¥–∞–Ω–Ω—ã–µ.
	def login(self, User: telebot.types.User, Admin: bool = False) -> bool:
		# –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
		UserID = str(User.id) 
		# –ë—É—Ñ–µ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
		Bufer = {
			"first-name": User.first_name,
			"last-name": User.last_name,
			"username": User.username,
			"premium": bool(User.is_premium),
			"subscripted": False,
			"active": True,
			"admin": Admin
		}
		
		# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.
		if UserID in self.__Users["users"].keys() and Admin == False:
			# –ó–∞–ø–∏—Å—å —Å—Ç–∞—Ç—É—Å–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.
			Bufer["admin"] = self.__Users["users"][UserID]["admin"]
			Bufer["subscripted"] = self.__Users["users"][UserID]["subscripted"]
			Bufer["active"] = self.__Users["users"][UserID]["active"]
			
		# –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Ö —Å—Ç–∞—Ç—É—Å.
		if Bufer["subscripted"] == False or self.__Settings["always-check-subscriptions"] == True: Bufer["subscripted"] = self.__CheckSubscriptions(UserID)
		# –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
		self.__Users["users"][UserID] = Bufer	
		# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
		WriteJSON("Data/Users.json", self.__Users)
		
		return Bufer["admin"]
	
	# –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ –≤—ã–±–æ—Ä–∫–µ.
	def mailing(self, Sampling: int) -> int:
		# –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–æ–∫.
		Mails = 0
		# –í—ã–±–æ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
		Users = list()
		
		# –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω—ã –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.
		if Sampling == 0:
			
			# –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
			for UserID in self.__Users["users"].keys():
			
				# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω.
				if self.__Users["users"][UserID]["active"] == True: 
					# –ó–∞–ø–∏—Å–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
					Users.append(UserID)
					
		# –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –≤—Å–µ Premium-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏.
		elif Sampling == -1:
			
			# –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
			for UserID in self.__Users["users"].keys():
			
				# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç Premium.
				if self.__Users["users"][UserID]["premium"] == True: 
					# –ó–∞–ø–∏—Å–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
					Users.append(UserID)
					
		# –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å–ª—É—á–∞–π–Ω–∞—è —á–∞—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
		elif Sampling > 0:

			# –ë—É—Ñ–µ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
			Bufer = list()
			
			# –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
			for UserID in self.__Users["users"].keys():
			
				# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω.
				if self.__Users["users"][UserID]["active"] == True: 
					# –ó–∞–ø–∏—Å–∞—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
					Bufer.append(UserID)
			
			# –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ –≤—ã–±–æ—Ä–∫–∞ –±–æ–ª—å—à–µ, —á–µ–º –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
			if Sampling >= len(Bufer):
				# –í—ã–±—Ä–∞—Ç—å –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
				Users = Bufer
				
			else:
				# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π –≤—ã–±–æ—Ä–∫–∏.
				Users = random.sample(Bufer, Sampling)

		# –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ.
		for UserID in Users:
			
			# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω.
			if self.__Users["users"][UserID]["active"] == True: 
				# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è.
				self.sendMessage(int(UserID))
				# –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–æ–∫.
				Mails += 1
				
			# –í—ã–∂–∏–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞.
			sleep(self.__Settings["delay"])

		return Mails
			
	# –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
	def sendMessage(self, ChatID: int):
		# –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤.
		Files = os.listdir("Attachments")[:10]
		
		# –ï—Å–ª–∏ –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è.
		if len(Files) > 0:
			# –°–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞ –≤–ª–æ–∂–µ–Ω–∏–π.
			Attachments = list()
			
			# –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞.
			for Index in range(0, len(Files)):
				
				# –î–æ–ø–æ–ª–Ω–∏—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è —Ñ–∞–π–ª–æ–º.
				Attachments.append(
					types.InputMediaPhoto(
						open("Attachments/" + Files[Index], "rb"), 
						caption = self.__Settings["message"] if Index == 0 else "",
						parse_mode = "HTML"
					)
				)
				
			try:
				# –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞ –≥—Ä—É–ø–ø—ã: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞.
				self.__Bot.send_media_group(
					ChatID,
					media = Attachments
				)
				
			except Exception as ExceptionData:
				# –í—ã–≤–æ–¥ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.
				print(ExceptionData)
			
		else:

			# –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ.
			if len(self.__Settings["message"]) > 0:
				
				try:
					# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞.
					self.__Bot.send_message(
						ChatID,
						text = self.__Settings["message"],
						parse_mode = "HTML",
						disable_web_page_preview = True
					)
					
				except Exception as ExceptionData:
					# –í—ã–≤–æ–¥ –∏—Å–∫–ª—é—á–µ–Ω–∏—è.
					print(ExceptionData)

	# –ó–∞–¥–∞—ë—Ç —Ç–∏–ø –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
	def setExpectedType(self, Type: ExpectedMessageTypes):
		self.__ExpectedType = Type