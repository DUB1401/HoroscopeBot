from Source.Core.Horoscope import Horoscoper, Zodiacs
from Source.UI import InlineKeyboards, ReplyKeyboards
from Source.Core.Scheduler import Scheduler
from Source.UI.AdminPanel import Panel
from Source.Core.GetText import _

from dublib.TelebotUtils import TeleCache, TeleMaster, UsersManager
from dublib.Methods.System import CheckPythonMinimalVersion
from dublib.Methods.Filesystem import MakeRootDirectories
from dublib.Methods.JSON import ReadJSON
from telebot import types

import telebot
import random
import os

#==========================================================================================#
# >>>>> –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –°–ö–†–ò–ü–¢–ê <<<<< #
#==========================================================================================#

CheckPythonMinimalVersion(3, 10)
MakeRootDirectories(["Data/Horoscopes"])

#==========================================================================================#
# >>>>> –ß–¢–ï–ù–ò–ï –ù–ê–°–¢–†–û–ï–ö –ò –°–û–ó–î–ê–ù–ò–ï –û–ë–™–ï–ö–¢–û–í <<<<< #
#==========================================================================================#

Settings = ReadJSON("Settings.json")
if type(Settings["bot_token"]) != str or Settings["bot_token"].strip() == "": raise Exception("Invalid Telegram bot token.")
if type(Settings["bot_name"]) == str: Settings["bot_name"] = Settings["bot_name"].strip("\t \n@")

Bot = telebot.TeleBot(Settings["bot_token"])
MasterBot = TeleMaster(Bot)
Users = UsersManager("Data/Users")
AdminPanel = Panel()

Cacher = TeleCache("TeleCache.json")
Cacher.set_options(Bot, Settings["cache_chat_id"])

Horoscopes = Horoscoper(Cacher)

SchedulerObject = Scheduler(Bot, Users, Horoscopes)
if Settings["update_on_restart"]: SchedulerObject.update_horoscopes()
SchedulerObject.run()

#==========================================================================================#
# >>>>> –û–ë–†–ê–ë–û–¢–ö–ê –ö–û–ú–ú–ê–ù–î <<<<< #
#==========================================================================================#

AdminPanel.decorators.commands(Bot, Users, Settings["password"])

@Bot.message_handler(commands = ["mailset"])
def Command(Message: types.Message):
	User = Users.auth(Message.from_user)
	Bot.send_message(User.id, _("–ñ–µ–ª–∞–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —É—Ç—Ä–µ–Ω–Ω—é—é —Ä–∞—Å—Å—ã–ª–∫—É <b>–ì–æ—Ä–æ—Å–∫–æ–ø–∞ –¥–Ω—è</b>?"), parse_mode = "HTML", reply_markup = InlineKeyboards.notifications())

@Bot.message_handler(commands = ["share"])
def Command(Message: types.Message):
	User = Users.auth(Message.from_user)
	
	QrPath = "Data/Images/qr.jpg"
	BotName = Settings["bot_name"]

	if BotName: BotName = f"@{BotName}\n@{BotName}\n@{BotName}\n\n"
	else: BotName = ""

	Caption = BotName + _("<b>üåü –ì–æ—Ä–æ—Å–∫–æ–ø –¥–Ω—è</b>\n–ù–∞–π–¥–∏ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –∏ —É–∑–Ω–∞–π, —á—Ç–æ –¥–ª—è —Ç–µ–±—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–≤–µ–∑–¥—ã!")

	if os.path.exists(QrPath):
		FileID = None

		try: FileID = Cacher[QrPath]
		except KeyError: FileID = Cacher.upload_file(QrPath, types.InputMediaPhoto).id

		Bot.send_photo(User.id, FileID, Caption, parse_mode = "HTML")

	else:
		Bot.send_message(User.id, Caption, parse_mode = "HTML")

@Bot.message_handler(commands = ["start"])
def Command(Message: types.Message):
	User = Users.auth(Message.from_user)
	User.set_property("zodiac", None, force = False)

	Bot.send_message(
		chat_id = Message.chat.id,
		text = _("<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ì–æ—Ä–æ—Å–∫–æ–ø –¥–Ω—è!</b>\n\n–°–∞–º—ã–π –±–æ–ª—å—à–æ–π –∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –±–æ—Ç-–∞—Å—Ç—Ä–æ–ª–æ–≥ –≤ Telegram üí´\n\n–í—ã–±–∏—Ä–∞–π —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –∏ —Å–º–µ–ª–æ –Ω–∞—á–∏–Ω–∞–π —ç—Ç–æ—Ç –¥–µ–Ω—å!"),
		parse_mode = "HTML",
		reply_markup = ReplyKeyboards.zodiac_menu()
	)

#==========================================================================================#
# >>>>> –û–ë–†–ê–ë–û–¢–ö–ê REPLY-–ö–ù–û–ü–û–ö <<<<< #
#==========================================================================================#

AdminPanel.decorators.reply_keyboards(Bot, Users)

#==========================================================================================#
# >>>>> –û–ë–†–ê–ë–û–¢–ö–ê –í–í–û–î–ê –¢–ï–ö–°–¢–ê <<<<< #
#==========================================================================================#

@Bot.message_handler(content_types = ["text"])
def Text(Message: types.Message):
	User = Users.auth(Message.from_user)
	if AdminPanel.procedures.text(Bot, User, Message): return

	ErrorMessages = [
		_("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–≤–æ–µ–≥–æ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞"),
		_("–ù–µ–º–Ω–æ–∂–∫–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å. –î–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –≤–Ω–∏–∑—É)"),
		_("–ù–µ –º–æ–≥—É –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ë—É–¥—É —Ä–∞–¥, –µ—Å–ª–∏ –≤—ã –Ω–∞–∂–º–µ—Ç–µ –Ω–∞ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞"),
		_("–û—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –Ω–æ, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –Ω–∞ —ç—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—é –≤–Ω–∏–∑—É)"),
		_("–≠—Ç–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –¥–ª—è –º–µ–Ω—è –∫–æ–º–∞–Ω–¥–∞. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤–∞–º –ª—É—á—à–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ")
	]

	ErrorMessage = random.choice(ErrorMessages)
	Words = Message.text.split(" ")

	if len(Words) != 2:
		Bot.send_message(User.id, ErrorMessage)
		return

	Zodiac = Words[-1].lower()

	if Zodiac not in [Element.value for Element in Zodiacs]:
		Bot.send_message(User.id, ErrorMessage)
		return
	
	Zodiac = Zodiacs(Zodiac)
	SchedulerObject.send_horoscope(User, Zodiac)

#==========================================================================================#
# >>>>> –û–ë–†–ê–ë–û–¢–ö–ê INLINE-–ö–ù–û–ü–û–ö <<<<< #
#==========================================================================================#

AdminPanel.decorators.inline_keyboards(Bot, Users)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("notifications"))
def InlineButton(Call: types.CallbackQuery):
	User = Users.auth(Call.from_user)
	Command = Call.data.split("_")[-1]

	match Command:

		case "enable":
			Bot.edit_message_text(_("–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –∏–∑ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –Ω–∏–∂–µ —Å–ø–∏—Å–∫–∞:"), User.id, Call.message.id, reply_markup = InlineKeyboards.zodiac_selector())

		case "disable":
			User.set_property("zodiac", None)
			Bot.edit_message_text(_("–•–æ—Ä–æ—à–æ! –í—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Å–º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–≤–æ–µ–≥–æ –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ –≤ –º–µ–Ω—é üí´"), User.id, Call.message.id, reply_markup = None)

@Bot.callback_query_handler(func = lambda Callback: Callback.data.startswith("select"))
def InlineButton(Call: types.CallbackQuery):
	User = Users.auth(Call.from_user)
	Value = Call.data.split("_")[-1]
	User.set_property("zodiac", Value)
	Bot.edit_message_text(
		text = _("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø—Ä–æ—Å—ã–ø–∞—Ç—å—Å—è –≤–º–µ—Å—Ç–µ —Å–æ –∑–≤–µ–∑–¥–∞–º–∏! ‚ú®Ô∏è"),
		chat_id = User.id,
		message_id = Call.message.id,
		reply_markup = None
	)

#==========================================================================================#
# >>>>> –û–ë–†–ê–ë–û–¢–ö–ê –§–ê–ô–õ–û–í <<<<< #
#==========================================================================================#

AdminPanel.decorators.files(Bot, Users)
	
Bot.infinity_polling()